<?php

/**
 * Implements hook_install()
 */
function civihr_install() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // Enable some standard blocks.
  $default_theme = variable_get('theme_default', 'bartik');
  $admin_theme = 'seven';
  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'new',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to a square thumbnail option.
//  variable_set('user_pictures', '0');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', $filtered_html_permission));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  variable_set('node_admin_theme', '1');
}

function civihr_install_tasks($install_state) {
  $tasks['install_civihr'] = [
    'type' => 'batch',
    'display_name' => st('Install CiviHR'),
    'function' => '_civihr_install_civihr'
  ];

  return $tasks;
}

function civihr_install_tasks_alter(&$tasks, $install_state) {
  $tasks['install_select_profile']['display'] = FALSE;
}

function _civihr_install_civihr() {
  $operations = [
    [ '_civihr_install_civicrm', []]
  ];

  $operations = array_merge($operations, _civihr_get_extension_install_operations());

  $operations[] = [ '_civihr_install_ssp', [] ];

  return [
    'title' => t('Installing CiviHR'),
    'operations' => $operations
  ];
}

function _civihr_install_civicrm(&$context) {
  watchdog(WATCHDOG_INFO, 'Installing CiviCRM');
  $civicrm_path = dirname(drupal_get_path('module', 'civicrm'));

  require_once implode(DIRECTORY_SEPARATOR, [$civicrm_path, 'CRM', 'Core', 'ClassLoader.php']);
  CRM_Core_ClassLoader::singleton()->register();
  \Civi\Setup::assertProtocolCompatibility(1.0);
  \Civi\Setup::init([
    'cms' => 'Drupal',
    'srcPath' => $civicrm_path,
  ]);
  $setup = \Civi\Setup::instance();
  $setup->installFiles();
  $setup->installDatabase();

  watchdog(WATCHDOG_INFO, 'CiviCRM Installed');
}

function _civihr_get_extension_install_operations() {
  $operations = [];

  $extensionBatches = [
    [
      'uk.co.compucorp.civicrm.hrcore',
      'uk.co.compucorp.civicrm.hremails',
    ],
    [
      'org.civicrm.hrbank',
      'org.civicrm.hrdemog',
      'org.civicrm.hrjobcontract',
      'com.civicrm.hrjobroles',
      'org.civicrm.hrmed',
      'org.civicrm.hrqual',
      'org.civicrm.hremergency',
      'org.civicrm.hrcareer',
      'uk.co.compucorp.contactaccessrights',
      'uk.co.compucorp.civicrm.tasksassignments',
      'uk.co.compucorp.civicrm.hrcomments',
      'uk.co.compucorp.civicrm.hrleaveandabsences',
    ],
    [
      'org.civicrm.hrreport',
      'org.civicrm.hrui',
      'org.civicrm.hrcase',
      'org.civicrm.hrim',
      'org.civicrm.hrrecruitment',
      'org.civicrm.reqangular',
      'org.civicrm.contactsummary',
      'org.civicrm.shoreditch',
      'org.civicrm.bootstrapcivihr',
      'uk.co.compucorp.civicrm.hrcontactactionsmenu',
    ]
  ];

  foreach ($extensionBatches as $extensions) {
    $operations[] = [
      '_civihr_install_install_extensions',
      [$extensions]
    ];
  }

  return $operations;
}

function  _civihr_install_install_extensions($extensions, &$context) {
  civicrm_initialize();
  $context['message'] = 'Installed ' . implode(', ', $extensions);

  watchdog(WATCHDOG_INFO, 'Installing ' . implode(', ', $extensions));

  civicrm_api3('Extension', 'refresh');
  civicrm_api3('Extension', 'install', ['keys' => $extensions]);

  watchdog(WATCHDOG_INFO, 'Installed ' . implode(', ', $extensions));
}

function _civihr_install_ssp(&$context) {
  _civihr_enabled_ssp_modules_and_features();
  _civihr_ssp_extra_configuration();
  _civihr_setup_themes();
}

function _civihr_enabled_ssp_modules_and_features() {
  module_enable([
    'administerusersbyrole',
    'role_delegation',
    'userprotect',
    'masquerade',
    'smtp',
    'logintoboggan',
    'yoti',
    'menu_attributes',
    'roles_for_menu',
    'civicrmtheme',
    'civihr_employee_portal_features',
    'civihr_leave_absences',
    'leave_and_absences_features',
    'civihr_default_permissions',
    'onboarding_slideshow',
    'civihr_default_mail_content',
  ]);
}

function _civihr_ssp_extra_configuration() {
  variable_set('logintoboggan_login_with_email', 1);
  variable_set('user_pictures', 0);
  variable_set('node_export_reset_path_webform', 0);
  variable_set('mimemail_sitestyle', 0);
  variable_set('smtp_allowhtml', 1);
  variable_set('mailsystem_theme', 'default');
  module_disable(['mimemail_compress']);
}

function _civihr_setup_themes() {
  module_enable(['seven', 'civihr_default_theme']);
  variable_set('admin_theme', 'seven');
  variable_set('theme_default', 'civihr_default_theme');
  variable_set('civicrmtheme_theme_admin', 'seven');
  variable_set('civicrmtheme_theme_public', 'seven');
}
